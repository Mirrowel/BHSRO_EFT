--[[
	MOD: Escape From Tarkov Health System (EFTH)
	AUTHOR: vegeta1k95
--]]

local class = aaa_efth_lua.class
local enum = aaa_efth_lua.enum

local Serialize = aaa_efth_lua.Serialize
local Deserialize = aaa_efth_lua.Deserialize
local ChooseRandom = aaa_efth_lua.ChooseRandom

local GetConfig = zzz_efth_mcm.GetConfig

-- ============================== Constants ====================================
CAMPFIRE_HEAL_ENABLED  = GetConfig("general_campfire_heal")
CAMPFIRE_HEAL_DISTANCE = 10.0	-- 10 meters
CAMPFIRE_HEAL_AMOUNT   = 0.3 	-- 0.3 HP on each limb
CAMPFIRE_HEAL_INTERVAL = 6000	-- 6 seconds between heals

FRACTURE_PERCENT_MAXHP = 0.3

BLEED_HEAVY_PERCENT_MAXHP = 0.1
BLEED_LIGHT_PERCENT_MAXHP = 0.1

PAIN_DAMAGE_THRESHOLD = 5
PAIN_DURATION_DEFAULT = 4000

--==============================================================================
--============================= Class "CLimb" ==================================
--==============================================================================

--[[
	This represents a body limb.
--]]
class "CLimb" 
{
	__init = function(self, name, hp_max, redirect_coeff, is_vital, is_fracturable)
		self.name			  = name
		self.hp               = hp_max				-- Current HP
		self.hp_max           = hp_max				-- Max possible HP
		self.hp_max_current   = hp_max				-- Max current HP (can be temporarily lower after restoration of a destroyed limb)
		self.hp_max_timer	  = 0					-- Max HP restore timer (`hp_max_current` will restore towards `hp_max` with time, see `OnUpdate`)
		
		self.redirect_coeff   = redirect_coeff		-- If destroyed, redirect this percent of damage to other limbs
		self.is_vital		  = is_vital			-- If destruction of this limb lead to death
		self.is_fracturable	  = is_fracturable		-- If limb can have fracture debuff
		
		-- Flag to mark this limb to be treated
		-- on the next item use
		self.to_heal_next	  = false
		
		self.penalty_counter   = 0						-- Number of effects which apply penalty to this limb
		self.penalty_on_apply  = function(self) end		-- To call when applying penalty to limb
		self.penalty_on_remove = function(self) end		-- To call when removing penalty from limb
	end;
	
	-- =================== HEALTH ============================
		
	OnHealthChanged = function(self)
		Body.conditions.health:Refresh()
		SendScriptCallback("efth_on_health_changed", self)
	end;
		
	PercentFromTotalHealth = function(self)
		return self.hp_max / Body.conditions.health.hp_max
	end;
	
	GetPercentHP = function(self)
		return self.hp / self.hp_max_current
	end;
	
	SetHP = function(self, value)
		local old_hp = self.hp
		local new_hp = clamp(value, 0, self.hp_max_current)
		
		if (self.hp ~= new_hp) then
			self.hp = new_hp
			
			-- HP changed - send callback 
			self:OnHealthChanged()
			
			-- HP became 0 - apply penalty
			if (self.hp == 0) then
				self:ApplyPenalty()			
			end
			
			-- HP was 0, became >0 - remove penalty
			if (old_hp == 0) then
				self:RemovePenalty()
			end
			
		end
		
		-- Return overflow damage (>0) / heal (<0)
		if (value < 0) then
			return (-value)
		elseif (value > self.hp_max_current) then
			return (self.hp_max_current - value)
		else
			return 0
		end
		
	end;
	
	SetMaxHP = function(self, value)
		self.hp_max_current = clamp(value, 1, self.hp_max)
		self.hp = clamp(self.hp, 0, self.hp_max_current)
		self:OnHealthChanged()
	end;
	
	ApplyDamage = function(self, damage)
		return self:SetHP(self.hp - damage)
	end;
	
	ApplyHeal = function(self, heal)
		return self:SetHP(self.hp + heal)
	end;
	
	CanBeHealed = function(self)
		return (self.hp > 0) and (self.hp < self.hp_max_current)
	end;

	IsDestroyed = function(self)
		return (self.hp == 0)
	end;
	
	IsAlive = function(self)
		return (self.hp > 0)
	end;
	
	-- ========================= BUFFS =============================
	
	AddBuff = function(self, cls, id, ...)
		Body.buffs:Add(self.name, cls, id, ...)
	end;
	
	RemoveBuff = function(self, cls, id)
		Body.buffs:Remove(self.name, cls, id)
	end;
	
	HasBuff = function(self, cls, id)
		return Body.buffs:HasBuff(self.name, cls, id)
	end;
	
	-- ====================== PENALTIES ============================
	
	ApplyPenalty = function(self)
		if (self.penalty_counter == 0) then
			self:penalty_on_apply()
		end
		self.penalty_counter = self.penalty_counter + 1
	end;
	
	RemovePenalty = function(self)
		if (self.penalty_counter == 1) then
			self:penalty_on_remove()
		end
		self.penalty_counter = math.max(self.penalty_counter - 1, 0)
	end;
	
}

--==============================================================================
--============================= Class "CBody" ==================================
--==============================================================================

class "CBody" 
{

	__init = function(self)
	
		-- Update timer
		self.last_update = time_global()
		
		-- Conditions
		-- More details inside `zzz_efth_conditions.script`
		self.conditions = {
			health		= CConditionHealth(),
			stamina 	= CConditionStamina(),		-- (TODO)
			energy 		= CConditionEnergy(),
			hydration 	= CConditionHydration(),
			radiation 	= CConditionRadiation(),
			weight		= CConditionWeight(),		-- (TODO)
		}
		
		-- Skills 
		-- More details inside `zzz_efth_skills.script`
		self.skills = {
			endurance 			= CSkillEndurance("endurance"),
			health 				= CSkillHealth("health"),
			immunity 			= CSkillImmunity("immunity"),
			metabolism 			= CSkillMetabolism("metabolism"),
			strength 			= CSkillStrength("strength"),
			stress_resistance 	= CSkillStressResistance("stress_resistance"),
			vitality 			= CSkillVitality("vitality"),
		}
		
		-- Buffs list
		self.buffs = CBuffList()
			
		-- Body limbs
		self.limbs = {
			--					name		 HP  RED   VITAL  FRACT
			head 		= CLimb("head", 	 35, 0.00, true,  false),   -- Heal: vital, no penalties (death)
			torso 		= CLimb("torso", 	 80, 0.00, true,  false),	-- Torso: vital, no penalties (death)
			stomach 	= CLimb("stomach", 	 70, 1.05, false, false),	-- Stomach: non-vital, has penalties
			arm_left 	= CLimb("arm_left",  60, 0.45, false, true),	-- Arms: non-vital, has penalties
			arm_right 	= CLimb("arm_right", 60, 0.45, false, true),	
			leg_left 	= CLimb("leg_left",  65, 0.70, false, true),	-- Legs: non-vital, has penalties
			leg_right 	= CLimb("leg_right", 65, 0.70, false, true),
		}
		
		for name, limb in pairs(self.limbs) do
			self.conditions.health.hp_max = self.conditions.health.hp_max + limb.hp_max
		end
		
		local penalty_leg_apply = function(limb)
			limb:AddBuff(CBuffBrokenLegDebuff, nil, limb.name, 0.45)
			limb:AddBuff(CBuffBrokenLegDamage)
		end
		
		local penalty_leg_remove = function(limb)
			limb:RemoveBuff(CBuffBrokenLegDebuff)
			limb:RemoveBuff(CBuffBrokenLegDamage)
		end
		
		local penalty_arm_apply = function(limb)
			limb:AddBuff(CBuffBrokenArmDebuff)
		end;
		
		local penalty_arm_remove = function(limb)
			limb:RemoveBuff(CBuffBrokenArmDebuff)
		end;
		
		-- Legs
		self.limbs.leg_left.penalty_on_apply = penalty_leg_apply
		self.limbs.leg_left.penalty_on_remove = penalty_leg_remove
		self.limbs.leg_right.penalty_on_apply = penalty_leg_apply
		self.limbs.leg_right.penalty_on_remove = penalty_leg_remove
		
		-- Arms
		self.limbs.arm_left.penalty_on_apply = penalty_arm_apply
		self.limbs.arm_left.penalty_on_remove = penalty_arm_remove
		self.limbs.arm_right.penalty_on_apply = penalty_arm_apply
		self.limbs.arm_right.penalty_on_remove = penalty_arm_remove
		
		-- Stomach
		self.limbs.stomach.penalty_on_apply = function(limb) 
			limb:AddBuff(CBuffBrokenStomach)
		end
		self.limbs.stomach.penalty_on_remove = function(limb)
			limb:RemoveBuff(CBuffBrokenStomach)
		end
		
		-- Register events
		EventBus:SubscribeMethod(self, self.Save, Events.Save)
		EventBus:SubscribeMethod(self, self.Load, Events.Load)
		EventBus:SubscribeMethod(self, self.OnUpdate, Events.Update)
		EventBus:SubscribeMethod(self, self.OnFirstUpdate, Events.FirstUpdate)
		EventBus:SubscribeMethod(self, self.OnJump, Events.Jump)
		EventBus:SubscribeMethod(self, self.OnSleep, Events.Sleep)
		EventBus:SubscribeMethod(self, self.OnFootstep, Events.Footstep)
		EventBus:SubscribeMethod(self, self.OnHUDAnimationPlay, Events.HUDAnimationPlay)		
	end;
	
	-- ========================= BUFFS SECTION =========================
	
	AddBuffDelayed = function(self, delay, cls, id, ...)
		self.buffs:AddDelayed(delay, nil, cls, id, ...)
	end;
	
	AddBuff = function(self, cls, id, ...)
		self.buffs:Add(nil, cls, id, ...)
	end;
	
	RemoveBuff = function(self, cls, id)
		self.buffs:Remove(nil, cls, id)
	end;
	
	HasBuff = function(self, cls, id)
		return self.buffs:HasBuff(nil, cls, id)
	end;
	
	-- ========================= STATE SECTION =========================
	
	-- Save state
	Save = function(self, data)
	
		local save = {
			limbs  = {},
			buffs  = {},
			skills = {},
			conditions = {},
		}
		
		Serialize(self.limbs, save.limbs)
		Serialize(self.buffs, save.buffs)
		Serialize(self.skills, save.skills)
		Serialize(self.conditions, save.conditions)
			
		data.efth_body = save
		
	end;
	
	-- Load state
	Load = function(self, data)
	
		local save = data.efth_body
	
		-- Restore table data, if present
		if (save) then
		
			Deserialize(save.limbs, self.limbs)
			Deserialize(save.buffs, self.buffs)
			Deserialize(save.skills, self.skills)
			Deserialize(save.conditions, self.conditions)
		
		end
		
	end;
	
	-- First update setup
	OnFirstUpdate = function(self)
			
		-- Send callbacks about updating HP
		for limb_name, limb in pairs(self.limbs) do
			limb:OnHealthChanged()
		end	
		
		-- Restore buffs active count after load
		for buff_id, buff in pairs(self.buffs.active.queue) do
			buff.__class.ACTIVE = buff.__class.ACTIVE + 1
			buff:OnLoaded()
		end
	
	end;
		
	-- Why. Won't. You. DIE!
	Die = function(self)
		db.actor:kill(db.actor, true)
	end;
	
	-- ================================== DAMAGE LOGIC =====================================
	
	--[[ 
		Damage calculations
		
		REFERENCE: https://www.youtube.com/watch?v=I_mAiNdmpSA
		
		IDEA: All the overflowing damage to a limb (if damage > limb's current HP)
			  is redistributed to other limbs.
		NOTE: Redistributed damage WILL kill you if a vital limb becomes destroyed
			  as a result.
	--]]
	ApplyDamage = function(self, limb, damage, hit_type)
		
		-- Skip if:
		-- 1) No damage
		-- 2) Enabled God Mode
		-- 3) Disabled actor:can_be_harmed
		
		if (damage == 0) or 
		   (get_console_cmd(1,"g_god")) or 
		   (db.actor:can_be_harmed() == false)
		then
			return
		end
		
		-- Overflow damage
		local overflow = damage - limb.hp
		
		-- Apply damage dealt
		limb:ApplyDamage(damage)
		
		-- Vital limb destroyed by direct damage - DEAD
		if (limb:IsDestroyed()) and (limb.is_vital) then
			self:Die()
			return
		end
				
		-- Damage >= limb HP - limb is destroyed, should redirect damage.
		if (overflow > 0) and (limb.redirect_coeff > 0) then
		
			-- Damage which should be distributed other limbs
			overflow = overflow * limb.redirect_coeff

			-- Iterate each limb and apply damage proportional to 
			-- that limb's percentage of the total max health.
			-- Example: Overflow = 20
			-- 		    TORSO max HP = 80
			--			BODY max HP = 365
			--			Applied damage to TORSO = 20 * 80/365 = 4.38
			for name, lmb in pairs(self.limbs) do
				lmb:ApplyDamage(overflow * lmb:PercentFromTotalHealth())
				
				-- Vital limb destroyed by indirect (redirected) damage
				if (lmb:IsDestroyed() and lmb.is_vital) then
					self:Die()
					return
				end
							
			end
		end
		
		-- Above damage threshold generic hit applies short pain
		if (damage > PAIN_DAMAGE_THRESHOLD) then
			
			-- Stress Resistance skill reduces chance to obtain pain debuff
			local chance = 1.0 - Body.skills.stress_resistance:GetPainReduceChance()
			
			if (math.random() <= chance) then
				limb:AddBuff(CBuffPainTemporary, nil, PAIN_DURATION_DEFAULT)
			end
			
		end
		
		-- If hit type allows - try to apply bleeding
		if (hit_type.prob_bleed > 0) and (CBuffHemostatic.ACTIVE == 0) then
		
			-- Order of evaluation
			-- 1) Fresh wound - 100% chance to start Heavy Bleed
			-- 2) Heavy bleed threshold met - (prob_bleed)% chance to start Heavy Bleed
			-- 3) Light bleed threshold met - (prob_bleed)% chance to start Light Bleed
			
			-- Heavy bleed threshold - BLEED_HEAVY_PERCENT_MAXHP of the current max limb HP
			-- Light bleed threshold - BLEED_LIGHT_PERCENT_MAXHP of the current max limb HP
			
			-- NOTE: `prob_bleed` chance is influenced by your Vitality skill level!
			
			local prob_bleed = hit_type.prob_bleed * (1.0 - self.skills.vitality:GetBleedChanceModifier())
			local is_temporary = self.skills.vitality:IsElite()
			
			if (limb:HasBuff(CBuffFreshWound)) then
				if (is_temporary) then
					limb:AddBuff(CBuffBleedHeavyTemporary)
				else
					limb:AddBuff(CBuffBleedHeavy)
				end
			elseif (damage > limb.hp_max_current * BLEED_HEAVY_PERCENT_MAXHP) and (math.random() < prob_bleed) then
				if (is_temporary) then
					limb:AddBuff(CBuffBleedHeavyTemporary)
				else
					limb:AddBuff(CBuffBleedHeavy)
				end
			elseif (damage > limb.hp_max_current * BLEED_LIGHT_PERCENT_MAXHP) and (math.random() < prob_bleed) then
				-- Light bleed cannot override heavy bleed
				if (limb:HasBuff(CBuffBleedHeavy)) or 
				   (limb:HasBuff(CBuffBleedHeavyTemporary)) 
				then
					if (is_temporary) then
						limb:AddBuff(CBuffBleedLightTemporary)
					else
						limb:AddBuff(CBuffBleedLight)
					end
				end
			end
			
		end
		
		-- If hit type and limb type allows - try to apply fracture
		if (hit_type.prob_fracture > 0)	and (not limb:HasBuff(CBuffFracture)) then
		
			-- Fracture threshold met - (prob_fracure)% change to apply Fracture
			-- NOTE: Fall damage always applies fracture above threshold (has prob = 1)			
			-- NOTE: Fracture threshold - FRACTURE_PERCENT_MAXHP % of the current max limb HP
			
			-- NOTE: `prob_fracture` chance is influenced by your Health skill level!
			
			local prob_fracture = hit_type.prob_fracture * (1.0 - self.skills.health:GetFractureModifier())
			
			if (damage > limb.hp_max_current * FRACTURE_PERCENT_MAXHP) and (math.random() < prob_fracture) then
		
				-- Fracture is accompanied by constant pain, until treated
				limb:AddBuff(CBuffFracture)
				
				-- Play bone crack sound
				sound_object("efth\\fracture"):play(db.actor, 0, sound_object.s2d)
				
			end
		end
		
		-- Roll for concussion if head is hit
		if (limb.name == "head") and 
		   (CBuffConcussionHeal.ACTIVE == 0) and
		   (math.random() <= 0.3)
		then
			Body:AddBuff(CBuffConcussion, nil, 7000)
		end
				
	end;
	
	--[[
		This function will damage all the non-dead limbs by constant amount.
		
		WARNING: Player is NOT dying if this damage makes vital limb's HP go to 0,
				 but, player WILL die if total body HP goes to 0!				 
		NOTE:    Negative damage will result in heal!
	--]]
	ApplyBodyDamage = function(self, damage, is_percentile, apply_pain)
	
		-- Skip if:
		-- 1) No damage
		-- 2) Enabled God Mode
		-- 3) Disabled actor:can_be_harmed
		
		if (damage == 0) or 
		   (get_console_cmd(1,"g_god")) or 
		   (db.actor:can_be_harmed() == false)
		then
			return
		end
		
		for name, limb in pairs(self.limbs) do
			
			-- Damage applies to all non-dead limbs
			if (limb:IsAlive()) then
				
				-- If damage should be applied respective to the limb's percentage from total health
				if (is_percentile) then
					limb:ApplyDamage(damage * limb:PercentFromTotalHealth())
				else
					limb:ApplyDamage(damage)
				end
				
				-- Above damage threshold generic hit applies short pain
				if (apply_pain) and (damage > PAIN_DAMAGE_THRESHOLD) then
					
					-- Stress Resistance skill reduces chance to obtain pain debuff
					local chance = 1.0 - Body.skills.stress_resistance:GetPainReduceChance()
					
					if (math.random() <= chance) then
						limb:AddBuff(CBuffPainTemporary, nil, PAIN_DURATION_DEFAULT)
					end
					
				end
				
			end
		end
		
	end;
		
	--[[
		DOES:
			1) Restores limb's max HP
			2) Heals limb to max HP (even if was destroyed)
			3) Removes negative debuffs:
				• bleedings
				• fresh wounds
				• fractures
				• concussion
				• pain
		NOTE: Used when healed by medics
	--]]
	HealFully = function(self)
		
		for name, limb in pairs(self.limbs) do
			
			-- Restore max HP
			limb:SetMaxHP(limb.hp_max)
			
			-- Restore HP
			limb:SetHP(limb.hp_max)
			
			-- Remove debuffs
			limb:RemoveBuff(CBuffBleedLight)
			limb:RemoveBuff(CBuffBleedLightTemporary)
			limb:RemoveBuff(CBuffBleedHeavy)
			limb:RemoveBuff(CBuffBleedHeavyTemporary)
			limb:RemoveBuff(CBuffFreshWound)
			limb:RemoveBuff(CBuffPainTemporary)
			limb:RemoveBuff(CBuffFracture)
			limb:RemoveBuff(CBuffConcussion)
			
		end
		
	end;
	
	IsHealable = function(self)
	
		if (self.conditions.health:GetPercent() < 1.0) or 
		   (self.conditions.health.hp_max_current < self.conditions.health.hp_max) or
		   (CBuffBleedHeavy.ACTIVE > 0) or (CBuffBleedHeavyTemporary.ACTIVE > 0) or
		   (CBuffBleedLight.ACTIVE > 0) or (CBuffBleedLightTemporary.ACTIVE > 0) or
		   (CBuffFracture.ACTIVE > 0) or (CBuffConcussion.ACTIVE > 0)
		then
			return true
		end
		
		return false
	end;
	
	-- ============================= OVER TIME / DURATIONAL ======== =======================
	
	GetNearbyLitCampfire = function(distance)

		local pos = db.actor:position()
		
		-- Iterate campfires
		for id, binder in pairs(bind_campfire.campfires_all) do
			
			-- Check only those lit
			if (binder and binder.campfire and binder.campfire:is_on()) then
			
				-- Check for distance from player
				if (pos:distance_to_sqr(binder.object:position()) <= distance) then
					return true
				end
				
			end 
			
		end 
		
		return false
	end;
	
	-- This is called on each `actor_on_update` and updates all time-based and durational 
	-- effects: bleedings, wounds, pain, painkillers, buffs, and so on.
	-- Interval of update: 1 second = 1000 ms
	OnUpdate = function(self)
	
		-- Syncronize vanilla HP with limbs HP
		self.conditions.health:Sync()
		
		-- Time now
		local time_now = time_global()
		
		-- Time since last big update
		local time_since_update = time_now - self.last_update

		-- Time for update has come (1 second)
		if (time_since_update > 1000) then
		
			-- Update max HP of each limb,
			-- if limb is restoring after surgery,
			for name, limb in pairs(self.limbs) do
				
				-- Restore max limb's HP by 1 each minute (IRL).
				if (limb.hp_max > limb.hp_max_current) and 
				   (time_now - limb.hp_max_timer > 60000)
				then
					limb:SetMaxHP(limb.hp_max_current + 1)
					limb.hp_max_timer = time_now
				end

			end
			
			-- Update conditions
			for condition_name, condition in pairs(self.conditions) do
				condition:Update(time_since_update)
			end
		
			-- Update buffs
			self.buffs:Update(time_now, time_since_update)
			
			-- If enabled - check for campfire nearby
			if (CAMPFIRE_HEAL_ENABLED) then
				if (self.GetNearbyLitCampfire(CAMPFIRE_HEAL_DISTANCE)) then
					self:AddBuff(CBuffCampfire, nil, CAMPFIRE_HEAL_AMOUNT, CAMPFIRE_HEAL_INTERVAL)
				else
					self:RemoveBuff(CBuffCampfire)
				end
			end
			
			-- Update timer
			self.last_update = time_now

		end
	end;
	
	-- This is called after sleep
	OnSleep = function(self, hours)

		-- All durational buffs wear off
		for buff_id, buff in pairs(self.buffs.active.queue) do
			if (buff.IS_DURATIONAL) then
				buff.duration = 0
			end
		end
		for buff_id, buff in pairs(self.buffs.suspended.queue) do
			if (buff.IS_DURATIONAL) then
				buff.duration = 0
			end
		end
		
		for name, limb in pairs(self.limbs) do
		
			-- Limb restores HP pool to the max
			limb:SetMaxHP(limb.hp_max)
			
			-- Healthy limbs heal 10HP per hour of sleep
			-- Destroyed limbs spend first 6 hours to restore, then 10HP per remaining hour
			
			if (limb:IsAlive()) then
				limb:ApplyHeal(hours * 10)
			elseif (hours > 6) then
				limb:ApplyHeal((hours - 6) * 10)
			end
			
		end
	
	end;
	
	-- ================================== PENALTIES ========================================
	
	OnJump = function(self)
		-- Update jump-related effects
		for buff_id, buff in pairs(self.buffs.active.queue) do	
			if (buff.OnJump) then
				buff:OnJump()
			end
		end
	end;
	
	OnFootstep = function(self, material, power, hud_view, flags)
		
		-- Check if we are sprinting
		local is_sprinting = IsMoveState('mcSprint')
		
		-- Update movement-related effects
		for buff_id, buff in pairs(self.buffs.active.queue) do	
			if (buff.OnFootstep) then
				buff:OnFootstep(is_sprinting)
			end
		end
		
	end;
	
	OnHUDAnimationPlay = function(self, anm_table, obj)
	
		-- Update animation-related effects
		for buff_id, buff in pairs(self.buffs.active.queue) do	
			if (buff.OnAnimationStart) then
				buff:OnAnimationStart(anm_table, obj)
			end
		end
		
	end;	
}

-- Override sleep dialog function, to prevent sleeping while bleeding.
local originalUISleep = ui_sleep_dialog.UISleep.TestAndShow
ui_sleep_dialog.UISleep.TestAndShow = function(self, force)

	if (not force) then
	
		if (CBuffBleedLight.ACTIVE > 0) or (CBuffBleedLightTemporary.ACTIVE > 0) or
		   (CBuffBleedHeavy.ACTIVE > 0) or (CBuffBleedHeavyTemporary.ACTIVE > 0)
		then
			actor_menu.set_msg(1, game.translate_string("st_sleep_bleeding"), 4)
			disable_info("sleep_active")
			return
		end
		
	end
	
	-- Otherwise, call original function
	originalUISleep(self, force)
end

--==========================================================================================
--========================================== Callbacks =====================================
--==========================================================================================

function OnKeyPressed(dik)
	--[[
	if dik == DIK_keys.DIK_H then
		Body:AddBuff(CBuffTremor, "test")
		xr_sound.set_sound_play(db.actor:id(), "pda_tips")
	elseif dik == DIK_keys.DIK_J then
		Body:RemoveBuff(CBuffTremor, "test")
		xr_sound.set_sound_play(db.actor:id(), "pda_tips")
	end
	--]]
end

function ActorOnNetDestroy()
	-- Restore FOV if we load/quit game during "Berserk" buff
	if (CBuffBerserk.ACTIVE > 0) then
		exec_console_cmd("fov " .. Body.buffs.active.queue["CBuffBerserk"].fov)
	end
end

function on_game_start()

	-- Main instance
	_G.Body = CBody()
	
	AddScriptCallback("efth_on_health_changed")
	AddScriptCallback("efth_on_penalties_changed")
	
	AddScriptCallback("efth_on_buff_added")
	AddScriptCallback("efth_on_buff_removed")
	AddScriptCallback("efth_on_buff_expiring")
	
	RegisterScriptCallback("on_key_press", OnKeyPressed)	
	RegisterScriptCallback("actor_on_net_destroy", ActorOnNetDestroy)
end